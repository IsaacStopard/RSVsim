n_groups = 1,
time = 0,
deterministic = TRUE,
seed = 123
) |> invisible()
dust2::dust_system_set_state_initial(RSV_dust)
# do not change this
# the order is determined by the order in the odin RSV_ODE.R file
states <- dust2::dust_unpack_index(RSV_dust)
states <- lapply(1:length(states), function(i){rep(names(states[i]), length(states[[i]]))}) |> unlist()
n_states <- length(unique(states))
ages <- rep(parameters$age.limits, n_states)
dt <- 1
times_in <- seq(0, max_t, dt)
# running the model without the cohort aging
out <- dust2::dust_system_simulate(RSV_dust,
times = times_in)
out_plot <- out |> as.data.frame()
colnames(out_plot) <- times_in
out_plot <- out_plot |> dplyr::mutate(state = states, age = ages) |>
tidyr::pivot_longer(cols = 1:length(times_in),
values_to = "value",
names_to = "time") |>
dplyr::mutate(time = as.numeric(time)) |>
dplyr::arrange(factor(state,
levels = c("Sp", "Ep", "Ip", "Ss", "Es", "Is", "R", "Incidence", "DetIncidence")),
age)
ggplot(data = subset(out_plot, state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
contact_population_list <- create_contact_matrix()
contact_population_list$matrix_mean
contact_population_list$matrix_mean |> colSums()
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list(),
contact_population_list = contact_population_list)
rep_z <- rep(0, parameters$nAges)
# running for the time of the smallest cohort
size_cohorts <- with(parameters,
c(diff(age.limits * 365.25), max_age*365.25 - age.limits[length(age.limits)]*365.25)
)
cohort_step_size <- floor(min(size_cohorts))
transition_rate <- cohort_step_size/size_cohorts
rel_sizes <- size_cohorts/sum(size_cohorts)
n_steps <- floor(max_t / cohort_step_size)
parameters <- purrr::list_modify(
parameters,
Sp0 = rel_sizes * parameters$total_population * 0.99,
Ep0 = rep_z,
Ip0 = rel_sizes * parameters$total_population * 0.01,
Ss0 = rep_z,
Es0 = rep_z,
Is0 = rep_z,
R0 = rep_z,
DetIncidence0 = rep_z,
Incidence0 = rep_z
)
# runs the model with cohort ageing
RSV_dust <- dust2::dust_system_create(generator = RSV_ODE,
pars = parameters,
n_particles = 1,
n_groups = 1,
time = 0,
deterministic = TRUE,
seed = 123
) |> invisible()
dust2::dust_system_set_state_initial(RSV_dust)
# do not change this
# the order is determined by the order in the odin RSV_ODE.R file
states <- dust2::dust_unpack_index(RSV_dust)
states <- lapply(1:length(states), function(i){rep(names(states[i]), length(states[[i]]))}) |> unlist()
n_states <- length(unique(states))
ages <- rep(parameters$age.limits, n_states)
dt <- 1
times_in <- seq(0, max_t, dt)
# running the model without the cohort aging
out <- dust2::dust_system_simulate(RSV_dust,
times = times_in)
out_plot <- out |> as.data.frame()
colnames(out_plot) <- times_in
out_plot <- out_plot |> dplyr::mutate(state = states, age = ages) |>
tidyr::pivot_longer(cols = 1:length(times_in),
values_to = "value",
names_to = "time") |>
dplyr::mutate(time = as.numeric(time)) |>
dplyr::arrange(factor(state,
levels = c("Sp", "Ep", "Ip", "Ss", "Es", "Is", "R", "Incidence", "DetIncidence")),
age)
ggplot(data = subset(out_plot, state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
parameters$b0
colSums(contact_population_list$matrix_contacts)
colSums(contact_population_list$matrix_mean)
devtools::load_all()
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list("b0" = 2),
contact_population_list = contact_population_list)
rep_z <- rep(0, parameters$nAges)
# running for the time of the smallest cohort
size_cohorts <- with(parameters,
c(diff(age.limits * 365.25), max_age*365.25 - age.limits[length(age.limits)]*365.25)
)
cohort_step_size <- floor(min(size_cohorts))
transition_rate <- cohort_step_size/size_cohorts
rel_sizes <- size_cohorts/sum(size_cohorts)
n_steps <- floor(max_t / cohort_step_size)
parameters <- purrr::list_modify(
parameters,
Sp0 = rel_sizes * parameters$total_population * 0.99,
Ep0 = rep_z,
Ip0 = rel_sizes * parameters$total_population * 0.01,
Ss0 = rep_z,
Es0 = rep_z,
Is0 = rep_z,
R0 = rep_z,
DetIncidence0 = rep_z,
Incidence0 = rep_z
)
# runs the model with cohort ageing
RSV_dust <- dust2::dust_system_create(generator = RSV_ODE,
pars = parameters,
n_particles = 1,
n_groups = 1,
time = 0,
deterministic = TRUE,
seed = 123
) |> invisible()
dust2::dust_system_set_state_initial(RSV_dust)
# do not change this
# the order is determined by the order in the odin RSV_ODE.R file
states <- dust2::dust_unpack_index(RSV_dust)
states <- lapply(1:length(states), function(i){rep(names(states[i]), length(states[[i]]))}) |> unlist()
n_states <- length(unique(states))
ages <- rep(parameters$age.limits, n_states)
dt <- 1
times_in <- seq(0, max_t, dt)
# running the model without the cohort aging
out <- dust2::dust_system_simulate(RSV_dust,
times = times_in)
out_plot <- out |> as.data.frame()
colnames(out_plot) <- times_in
out_plot <- out_plot |> dplyr::mutate(state = states, age = ages) |>
tidyr::pivot_longer(cols = 1:length(times_in),
values_to = "value",
names_to = "time") |>
dplyr::mutate(time = as.numeric(time)) |>
dplyr::arrange(factor(state,
levels = c("Sp", "Ep", "Ip", "Ss", "Es", "Is", "R", "Incidence", "DetIncidence")),
age)
ggplot(data = subset(out_plot, state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list(),
contact_population_list = contact_population_list)
rep_z <- rep(0, parameters$nAges)
# running for the time of the smallest cohort
size_cohorts <- with(parameters,
c(diff(age.limits * 365.25), max_age*365.25 - age.limits[length(age.limits)]*365.25)
)
cohort_step_size <- floor(min(size_cohorts))
transition_rate <- cohort_step_size/size_cohorts
rel_sizes <- size_cohorts/sum(size_cohorts)
n_steps <- floor(max_t / cohort_step_size)
parameters <- purrr::list_modify(
parameters,
Sp0 = rel_sizes * parameters$total_population * 0.99,
Ep0 = rep_z,
Ip0 = rel_sizes * parameters$total_population * 0.01,
Ss0 = rep_z,
Es0 = rep_z,
Is0 = rep_z,
R0 = rep_z,
DetIncidence0 = rep_z,
Incidence0 = rep_z
)
# runs the model with cohort ageing
RSV_dust <- dust2::dust_system_create(generator = RSV_ODE,
pars = parameters,
n_particles = 1,
n_groups = 1,
time = 0,
deterministic = TRUE,
seed = 123
) |> invisible()
dust2::dust_system_set_state_initial(RSV_dust)
# do not change this
# the order is determined by the order in the odin RSV_ODE.R file
states <- dust2::dust_unpack_index(RSV_dust)
states <- lapply(1:length(states), function(i){rep(names(states[i]), length(states[[i]]))}) |> unlist()
n_states <- length(unique(states))
ages <- rep(parameters$age.limits, n_states)
dt <- 1
times_in <- seq(0, max_t, dt)
# running the model without the cohort aging
out <- dust2::dust_system_simulate(RSV_dust,
times = times_in)
out_plot <- out |> as.data.frame()
colnames(out_plot) <- times_in
out_plot <- out_plot |> dplyr::mutate(state = states, age = ages) |>
tidyr::pivot_longer(cols = 1:length(times_in),
values_to = "value",
names_to = "time") |>
dplyr::mutate(time = as.numeric(time)) |>
dplyr::arrange(factor(state,
levels = c("Sp", "Ep", "Ip", "Ss", "Es", "Is", "R", "Incidence", "DetIncidence")),
age)
ggplot(data = subset(out_plot, state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list(),
contact_population_list = contact_population_list)
out_w_cohort <- RSVsim::run_model(parameters = parameters,
max_t = 3650,
dt = 1,
init_conds = NULL)
out_w_cohort
devtools::load_all()
out_w_cohort <- RSVsim::run_model(parameters = parameters,
max_t = 3650,
dt = 1,
init_conds = NULL)
ggplot(data = subset(out_w_cohort,
state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
ggplot(data = subset(out, age %in% c("[0, 0.08]",
"[1,1.08)",
"[2,2.08)",
"[3.08,3.17)",
"[4,4.08)",
"[5,10)",
"[20,25)",
"[50,55)") &
state != "DetIncidence" & state != "Incidence"),
aes(x = time, y = value, col = state)) +
geom_line() +
facet_wrap(~age, scales = "free_y") +
coord_cartesian(xlim = c(365*15, 365*17))
ggplot(data = subset(out_plot, state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
ggplot(data = subset(out_w_cohort,
state %in% c("Incidence") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
odin2::odin_package(path = "inst/odin")
odin2::odin_error_explain("E1001")
odin_check <- odin2::odin({N <- parameter(10)output()})
odin_check <- odin2::odin({N <- parameter(10)output(N)})
odin_check <- odin2::odin({N <- parameter(10)
output(N)})
odin_check <- odin2::odin({N <- parameter(10)
output(N) <- N})
odin_check <- odin2::odin({initial(N) <- parameter(10)
output(N) <- N})
odin2::odin_package(path = "inst/odin")
odin2::odin_package(path = "inst/odin")
odin2::odin_package(path = "inst/odin")
devtools::load_all()
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list(),
contact_population_list = contact_population_list)
out_w_cohort <- RSVsim::run_model(parameters = parameters,
max_t = 3650,
dt = 1,
init_conds = NULL)
ggplot(data = subset(out_w_cohort,
state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
ggplot(data = subset(out_w_cohort,
state %in% c("Incidence") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
odin2::odin_package("inst.odin")
odin2::odin_package("inst/odin")
devtools::load_all()
parameters <- get_parameters()
parameters <- get_parameters(contact_population_list = contact_population_list)
##########################################################
# labels for the ages
age_chr <- c(paste0("[",round(parameters$age.limits[1], digits = 2),",", round(parameters$age.limits[2], digits = 2),"]"))
for(i in 2:(parameters$nAges - 1)){
age_chr <- c(age_chr, c(paste0("[",round(parameters$age.limits[i], digits = 2),",", round(parameters$age.limits[i+1], digits = 2),")")))
}
age_chr <- c(age_chr, paste0("[",round(parameters$age.limits[parameters$nAges], digits = 2),",", round(parameters$max_age, digits = 2),")"))
# age differences in days
size_cohorts <- with(parameters,
c(diff(age.limits * 365.25), max_age*365.25 - age.limits[length(age.limits)]*365.25)
)
# running for the time of the smallest cohort
cohort_step_size <- floor(min(size_cohorts))
transition_rate <- cohort_step_size/size_cohorts
rel_sizes <- size_cohorts/sum(size_cohorts)
n_steps <- floor(max_t / cohort_step_size)
# initial conditions: choose whether to reset here
if(is.null(init_conds)) {
rep_z <- rep(0, parameters$nAges)
parameters <- purrr::list_modify(
parameters,
Sp0 = rel_sizes * parameters$total_population * 0.99,
Ep0 = rep_z,
Ip0 = rel_sizes * parameters$total_population * 0.01,
Ss0 = rep_z,
Es0 = rep_z,
Is0 = rep_z,
R0 = rep_z
)
} else{
parameters <- with(init_conds,{
for(name in c("Sp0", "Ep0", "Ip0", "Ss0", "Es0", "Is0", "R0")){
if(length(get(name)) != parameters$nAges){
stop(paste("Initial conditions for", name,"are not all the same length as the number of age categories", sep = " "))
}
}
purrr::list_modify(
parameters,
Sp0 = Sp0,
Ep0 = Ep0,
Ip0 = Ip0,
Ss0 = Ss0,
Es0 = Es0,
Is0 = Is0,
R0 = R0
)
}
)
}
init_conds <- NULL
# initial conditions: choose whether to reset here
if(is.null(init_conds)) {
rep_z <- rep(0, parameters$nAges)
parameters <- purrr::list_modify(
parameters,
Sp0 = rel_sizes * parameters$total_population * 0.99,
Ep0 = rep_z,
Ip0 = rel_sizes * parameters$total_population * 0.01,
Ss0 = rep_z,
Es0 = rep_z,
Is0 = rep_z,
R0 = rep_z
)
} else{
parameters <- with(init_conds,{
for(name in c("Sp0", "Ep0", "Ip0", "Ss0", "Es0", "Is0", "R0")){
if(length(get(name)) != parameters$nAges){
stop(paste("Initial conditions for", name,"are not all the same length as the number of age categories", sep = " "))
}
}
purrr::list_modify(
parameters,
Sp0 = Sp0,
Ep0 = Ep0,
Ip0 = Ip0,
Ss0 = Ss0,
Es0 = Es0,
Is0 = Is0,
R0 = R0
)
}
)
}
# runs the model with cohort ageing
RSV_dust <- dust2::dust_system_create(generator = RSV_ODE,
pars = parameters,
n_particles = 1,
n_groups = 1,
time = 0,
deterministic = TRUE
) |> invisible()
dust2::dust_system_set_state_initial(RSV_dust)
dust2::dust_unpack_index(RSV_dust)
dust2::dust_system_set_state_initial(RSV_dust)
# do not change this
# the order is determined by the order in the odin RSV_ODE.R file
states <- dust2::dust_unpack_index(RSV_dust)
states <- lapply(1:length(states), function(i){rep(names(states[i]), length(states[[i]]))}) |> unlist()
n_states <- length(unique(states))
ages <- rep(parameters$age.limits, n_states)
incidence_i <- which(states %in% c("Incidence", "DetIncidence"))
# running the model with cohort aging (run for a single cohort, move cohort, change initial states, repeat)
out_list <- vector(mode = "list", length = n_steps)
for(i in 1:n_steps){
times_in <- if(i == 1){
seq(0, i * cohort_step_size, dt)
} else{
seq((i - 1) * cohort_step_size + dt, i * cohort_step_size, dt)
}
out <- dust2::dust_system_simulate(RSV_dust,
times = times_in)
# checking the total population is correct
if(!all(abs(out[-incidence_i,] |> colSums() - parameters$total_population) < 1E-5)){
stop("Population does not sum to the correct number")
}
out_list[[i]] <- out |> as.data.frame()
colnames(out_list[[i]]) <- times_in
out_list[[i]] <- out_list[[i]] |> dplyr::mutate(state = states, age = ages) |>
tidyr::pivot_longer(cols = 1:length(times_in),
values_to = "value",
names_to = "time") |>
dplyr::mutate(time = as.numeric(time)) |>
dplyr::arrange(factor(state,
levels = c("Sp", "Ep", "Ip", "Ss", "Es", "Is", "R", "Incidence", "DetIncidence")),
age)
# calculating the initial states
next_state <- out_list[[i]] |>
dplyr::filter(time == max(time)) |>
dplyr::group_by(state) |>
dplyr::mutate(transition_ct = value * transition_rate,
lag_transition = dplyr::lag(transition_ct, 1, order_by = state))
# check NAs are in the correct place
if(!all(
next_state[which(is.na(next_state$lag_transition)), "age"] == 0) |
sum(is.na(next_state$lag_transition)) != n_states){
stop("error when lagging the cohort aging")
}
# filling in births to keep the population size constant
next_state <- next_state |> dplyr::ungroup() |>
dplyr::mutate(lag_transition =
ifelse(is.na(lag_transition) & age == 0 & state == "Sp",
rel_sizes[1] * transition_rate[1] * parameters$total_population,
ifelse(is.na(lag_transition) & age == 0, 0,
lag_transition)
)
)
if(
abs(
next_state |> dplyr::filter(age == max(age) &
state %in% c("Sp", "Ep", "Ip", "Ss", "Es", "Is", "R")
) |> dplyr::ungroup() |>
dplyr::select(transition_ct) |> as.vector() |> unlist() |> sum() -
rel_sizes[1] * transition_rate[1] * parameters$total_population
) > 1E-5){
stop("births are not correct to keep the population size constant")
}
next_state <- next_state |>
dplyr::mutate(next_value = value - transition_ct + lag_transition) |>
dplyr::select(next_value) |>
unlist() |> unname() |> as.vector()
if(abs(sum(next_state[-incidence_i]) - parameters$total_population) > 1E-7){
stop("total population for the next cohort states is not correct")
}
dust2::dust_system_set_state(sys = RSV_dust,
state = next_state)
if(all(dust2::dust_system_state(RSV_dust) != next_state)){
stop("states have not been updated")
}
}
return(
invisible(
dplyr::bind_rows(out_list) |>
dplyr::left_join(data.frame(age = parameters$age.limits,
age_chr = age_chr), by = dplyr::join_by(age)) |>
as.data.frame()
)
)
devtools::load_all()
devtools::test()
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list(),
contact_population_list = contact_population_list)
out_w_cohort <- RSVsim::run_model(parameters = parameters,
max_t = 3650,
dt = 1,
init_conds = NULL)
ggplot(data = subset(out_w_cohort,
state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
ggplot(data = subset(out_w_cohort,
state %in% c("Incidence") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
devtools::build()
odin2::odin_package(path = "inst/odin")
devtools::load_all()
devtools::build()
devtools::install_github("IsaacStopard/RSVsim")
library(RSVsim)
contact_population_list <- create_contact_matrix()
parameters <- get_parameters(overrides = list(),
contact_population_list = contact_population_list)
out_w_cohort <- RSVsim::run_model(parameters = parameters,
max_t = 3650,
dt = 1,
init_conds = NULL)
ggplot(data = subset(out_w_cohort,
state %in% c("Sp", "Ss", "Ip", "Is", "R") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
ggplot(data = subset(out_w_cohort,
state %in% c("Incidence") & age %in% c(0, 1, 2, 5, 20, 40, 50)),
aes(x = time, y = value, col = state, group = factor(state))) +
geom_line() +
facet_wrap(~age, scales = "free_y")
out
out_w_cohort
