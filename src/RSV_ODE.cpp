// Generated by dust2 (version 0.3.22) - do not edit

// Generated by odin2 (version 0.3.26) - do not edit
#include <dust2/common.hpp>
// [[dust2::class(RSV_ODE)]]
// [[dust2::time_type(continuous)]]
// [[dust2::parameter(nAges, type = "int", rank = 0, required = TRUE, constant = TRUE)]]
// [[dust2::parameter(b0, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(b1, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(phi, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(delta, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gamma_s, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(gamma_p, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(nu, type = "real_type", rank = 0, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(omega_vect, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(prop_detected_vect, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(sigma_vect, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(alpha_vect, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(matrix_mean, type = "real_type", rank = 2, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Sp0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Ep0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Ip0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Ss0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Es0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Is0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(R0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(Incidence0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
// [[dust2::parameter(DetIncidence0, type = "real_type", rank = 1, required = TRUE, constant = FALSE)]]
class RSV_ODE {
public:
  RSV_ODE() = delete;
  using real_type = double;
  using rng_state_type = monty::random::generator<real_type>;
  struct shared_state {
    struct odin_internals_type {
      struct {
        dust2::packing state;
      } packing;
      struct {
        std::array<size_t, 9> state;
      } offset;
    } odin;
    struct dim_type {
      dust2::array::dimensions<2> matrix_mean;
      dust2::array::dimensions<1> sigma_vect;
      dust2::array::dimensions<1> omega_vect;
      dust2::array::dimensions<1> prop_detected_vect;
      dust2::array::dimensions<1> alpha_vect;
      dust2::array::dimensions<1> Sp;
      dust2::array::dimensions<1> Ep;
      dust2::array::dimensions<1> Ip;
      dust2::array::dimensions<1> R;
      dust2::array::dimensions<1> Ss;
      dust2::array::dimensions<1> Es;
      dust2::array::dimensions<1> Is;
      dust2::array::dimensions<1> N;
      dust2::array::dimensions<1> Incidence;
      dust2::array::dimensions<1> DetIncidence;
      dust2::array::dimensions<1> Sp0;
      dust2::array::dimensions<1> Ep0;
      dust2::array::dimensions<1> Ip0;
      dust2::array::dimensions<1> Ss0;
      dust2::array::dimensions<1> Es0;
      dust2::array::dimensions<1> Is0;
      dust2::array::dimensions<1> R0;
      dust2::array::dimensions<1> Incidence0;
      dust2::array::dimensions<1> DetIncidence0;
      dust2::array::dimensions<1> lambda;
      dust2::array::dimensions<2> s_ij;
      dust2::array::dimensions<1> temp;
      dust2::array::dimensions<1> infect_p;
      dust2::array::dimensions<1> infect_s;
    } dim;
    int nAges;
    real_type b0;
    real_type b1;
    real_type phi;
    real_type delta;
    real_type gamma_s;
    real_type gamma_p;
    real_type nu;
    std::vector<real_type> omega_vect;
    std::vector<real_type> prop_detected_vect;
    std::vector<real_type> sigma_vect;
    std::vector<real_type> alpha_vect;
    std::vector<real_type> matrix_mean;
    std::vector<real_type> Sp0;
    std::vector<real_type> Ep0;
    std::vector<real_type> Ip0;
    std::vector<real_type> Ss0;
    std::vector<real_type> Es0;
    std::vector<real_type> Is0;
    std::vector<real_type> R0;
    std::vector<real_type> Incidence0;
    std::vector<real_type> DetIncidence0;
  };
  struct internal_state {
    std::vector<real_type> N;
    std::vector<real_type> temp;
    std::vector<real_type> s_ij;
    std::vector<real_type> lambda;
    std::vector<real_type> infect_p;
    std::vector<real_type> infect_s;
  };
  using data_type = dust2::no_data;
  static dust2::packing packing_state(const shared_state& shared) {
    return shared.odin.packing.state;
  }
  static shared_state build_shared(cpp11::list parameters) {
    shared_state::dim_type dim;
    const int nAges = dust2::r::read_int(parameters, "nAges");
    const real_type b0 = dust2::r::read_real(parameters, "b0");
    const real_type b1 = dust2::r::read_real(parameters, "b1");
    const real_type phi = dust2::r::read_real(parameters, "phi");
    const real_type delta = dust2::r::read_real(parameters, "delta");
    const real_type gamma_s = dust2::r::read_real(parameters, "gamma_s");
    const real_type gamma_p = dust2::r::read_real(parameters, "gamma_p");
    const real_type nu = dust2::r::read_real(parameters, "nu");
    dim.matrix_mean.set({static_cast<size_t>(nAges), static_cast<size_t>(nAges)});
    dim.sigma_vect.set({static_cast<size_t>(nAges)});
    dim.omega_vect.set({static_cast<size_t>(nAges)});
    dim.prop_detected_vect.set({static_cast<size_t>(nAges)});
    dim.alpha_vect.set({static_cast<size_t>(nAges)});
    dim.Sp.set({static_cast<size_t>(nAges)});
    dim.Ep.set({static_cast<size_t>(nAges)});
    dim.Ip.set({static_cast<size_t>(nAges)});
    dim.R.set({static_cast<size_t>(nAges)});
    dim.Ss.set({static_cast<size_t>(nAges)});
    dim.Es.set({static_cast<size_t>(nAges)});
    dim.Is.set({static_cast<size_t>(nAges)});
    dim.N.set({static_cast<size_t>(nAges)});
    dim.Incidence.set({static_cast<size_t>(nAges)});
    dim.DetIncidence.set({static_cast<size_t>(nAges)});
    dim.Sp0.set({static_cast<size_t>(nAges)});
    dim.Ep0.set({static_cast<size_t>(nAges)});
    dim.Ip0.set({static_cast<size_t>(nAges)});
    dim.Ss0.set({static_cast<size_t>(nAges)});
    dim.Es0.set({static_cast<size_t>(nAges)});
    dim.Is0.set({static_cast<size_t>(nAges)});
    dim.R0.set({static_cast<size_t>(nAges)});
    dim.Incidence0.set({static_cast<size_t>(nAges)});
    dim.DetIncidence0.set({static_cast<size_t>(nAges)});
    dim.lambda.set({static_cast<size_t>(nAges)});
    dim.s_ij.set({static_cast<size_t>(nAges), static_cast<size_t>(nAges)});
    dim.temp.set({static_cast<size_t>(nAges)});
    dim.infect_p.set({static_cast<size_t>(nAges)});
    dim.infect_s.set({static_cast<size_t>(nAges)});
    std::vector<real_type> omega_vect(dim.omega_vect.size);
    dust2::r::read_real_array(parameters, dim.omega_vect, omega_vect.data(), "omega_vect", true);
    std::vector<real_type> prop_detected_vect(dim.prop_detected_vect.size);
    dust2::r::read_real_array(parameters, dim.prop_detected_vect, prop_detected_vect.data(), "prop_detected_vect", true);
    std::vector<real_type> sigma_vect(dim.sigma_vect.size);
    dust2::r::read_real_array(parameters, dim.sigma_vect, sigma_vect.data(), "sigma_vect", true);
    std::vector<real_type> alpha_vect(dim.alpha_vect.size);
    dust2::r::read_real_array(parameters, dim.alpha_vect, alpha_vect.data(), "alpha_vect", true);
    std::vector<real_type> matrix_mean(dim.matrix_mean.size);
    dust2::r::read_real_array(parameters, dim.matrix_mean, matrix_mean.data(), "matrix_mean", true);
    std::vector<real_type> Sp0(dim.Sp0.size);
    dust2::r::read_real_array(parameters, dim.Sp0, Sp0.data(), "Sp0", true);
    std::vector<real_type> Ep0(dim.Ep0.size);
    dust2::r::read_real_array(parameters, dim.Ep0, Ep0.data(), "Ep0", true);
    std::vector<real_type> Ip0(dim.Ip0.size);
    dust2::r::read_real_array(parameters, dim.Ip0, Ip0.data(), "Ip0", true);
    std::vector<real_type> Ss0(dim.Ss0.size);
    dust2::r::read_real_array(parameters, dim.Ss0, Ss0.data(), "Ss0", true);
    std::vector<real_type> Es0(dim.Es0.size);
    dust2::r::read_real_array(parameters, dim.Es0, Es0.data(), "Es0", true);
    std::vector<real_type> Is0(dim.Is0.size);
    dust2::r::read_real_array(parameters, dim.Is0, Is0.data(), "Is0", true);
    std::vector<real_type> R0(dim.R0.size);
    dust2::r::read_real_array(parameters, dim.R0, R0.data(), "R0", true);
    std::vector<real_type> Incidence0(dim.Incidence0.size);
    dust2::r::read_real_array(parameters, dim.Incidence0, Incidence0.data(), "Incidence0", true);
    std::vector<real_type> DetIncidence0(dim.DetIncidence0.size);
    dust2::r::read_real_array(parameters, dim.DetIncidence0, DetIncidence0.data(), "DetIncidence0", true);
    shared_state::odin_internals_type odin;
    odin.packing.state = dust2::packing{
      {"Sp", std::vector<size_t>(dim.Sp.dim.begin(), dim.Sp.dim.end())},
      {"Ep", std::vector<size_t>(dim.Ep.dim.begin(), dim.Ep.dim.end())},
      {"Ip", std::vector<size_t>(dim.Ip.dim.begin(), dim.Ip.dim.end())},
      {"Ss", std::vector<size_t>(dim.Ss.dim.begin(), dim.Ss.dim.end())},
      {"Es", std::vector<size_t>(dim.Es.dim.begin(), dim.Es.dim.end())},
      {"Is", std::vector<size_t>(dim.Is.dim.begin(), dim.Is.dim.end())},
      {"R", std::vector<size_t>(dim.R.dim.begin(), dim.R.dim.end())},
      {"Incidence", std::vector<size_t>(dim.Incidence.dim.begin(), dim.Incidence.dim.end())},
      {"DetIncidence", std::vector<size_t>(dim.DetIncidence.dim.begin(), dim.DetIncidence.dim.end())}
    };
    odin.packing.state.copy_offset(odin.offset.state.begin());
    return shared_state{odin, dim, nAges, b0, b1, phi, delta, gamma_s, gamma_p, nu, omega_vect, prop_detected_vect, sigma_vect, alpha_vect, matrix_mean, Sp0, Ep0, Ip0, Ss0, Es0, Is0, R0, Incidence0, DetIncidence0};
  }
  static internal_state build_internal(const shared_state& shared) {
    std::vector<real_type> N(shared.dim.N.size);
    std::vector<real_type> temp(shared.dim.temp.size);
    std::vector<real_type> s_ij(shared.dim.s_ij.size);
    std::vector<real_type> lambda(shared.dim.lambda.size);
    std::vector<real_type> infect_p(shared.dim.infect_p.size);
    std::vector<real_type> infect_s(shared.dim.infect_s.size);
    return internal_state{N, temp, s_ij, lambda, infect_p, infect_s};
  }
  static void update_shared(cpp11::list parameters, shared_state& shared) {
    shared.b0 = dust2::r::read_real(parameters, "b0", shared.b0);
    shared.b1 = dust2::r::read_real(parameters, "b1", shared.b1);
    shared.phi = dust2::r::read_real(parameters, "phi", shared.phi);
    shared.delta = dust2::r::read_real(parameters, "delta", shared.delta);
    shared.gamma_s = dust2::r::read_real(parameters, "gamma_s", shared.gamma_s);
    shared.gamma_p = dust2::r::read_real(parameters, "gamma_p", shared.gamma_p);
    shared.nu = dust2::r::read_real(parameters, "nu", shared.nu);
    dust2::r::read_real_array(parameters, shared.dim.omega_vect, shared.omega_vect.data(), "omega_vect", false);
    dust2::r::read_real_array(parameters, shared.dim.prop_detected_vect, shared.prop_detected_vect.data(), "prop_detected_vect", false);
    dust2::r::read_real_array(parameters, shared.dim.sigma_vect, shared.sigma_vect.data(), "sigma_vect", false);
    dust2::r::read_real_array(parameters, shared.dim.alpha_vect, shared.alpha_vect.data(), "alpha_vect", false);
    dust2::r::read_real_array(parameters, shared.dim.matrix_mean, shared.matrix_mean.data(), "matrix_mean", false);
    dust2::r::read_real_array(parameters, shared.dim.Sp0, shared.Sp0.data(), "Sp0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ep0, shared.Ep0.data(), "Ep0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ip0, shared.Ip0.data(), "Ip0", false);
    dust2::r::read_real_array(parameters, shared.dim.Ss0, shared.Ss0.data(), "Ss0", false);
    dust2::r::read_real_array(parameters, shared.dim.Es0, shared.Es0.data(), "Es0", false);
    dust2::r::read_real_array(parameters, shared.dim.Is0, shared.Is0.data(), "Is0", false);
    dust2::r::read_real_array(parameters, shared.dim.R0, shared.R0.data(), "R0", false);
    dust2::r::read_real_array(parameters, shared.dim.Incidence0, shared.Incidence0.data(), "Incidence0", false);
    dust2::r::read_real_array(parameters, shared.dim.DetIncidence0, shared.DetIncidence0.data(), "DetIncidence0", false);
  }
  static void update_internal(const shared_state& shared, internal_state& internal) {
  }
  static void initial(real_type time, const shared_state& shared, internal_state& internal, rng_state_type& rng_state, real_type* state) {
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + 0] = shared.Sp0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[1]] = shared.Ep0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[2]] = shared.Ip0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[3]] = shared.Ss0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[4]] = shared.Es0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[5]] = shared.Is0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[6]] = shared.R0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[7]] = shared.Incidence0[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state[i - 1 + shared.odin.offset.state[8]] = shared.DetIncidence0[i - 1];
    }
  }
  static void rhs(real_type time, const real_type* state, const shared_state& shared, internal_state& internal, real_type* state_deriv) {
    const auto * Sp = state + 0;
    const auto * Ep = state + shared.odin.offset.state[1];
    const auto * Ip = state + shared.odin.offset.state[2];
    const auto * Ss = state + shared.odin.offset.state[3];
    const auto * Es = state + shared.odin.offset.state[4];
    const auto * Is = state + shared.odin.offset.state[5];
    const auto * R = state + shared.odin.offset.state[6];
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      internal.N[i - 1] = Ss[i - 1] + Es[i - 1] + Is[i - 1] + Sp[i - 1] + Ep[i - 1] + Ip[i - 1] + R[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.temp.size; ++i) {
      internal.temp[i - 1] = shared.omega_vect[i - 1] * (Is[i - 1] + Ip[i - 1]) / internal.N[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.s_ij.dim[0]; ++i) {
      for (size_t j = 1; j <= shared.dim.s_ij.dim[1]; ++j) {
        internal.s_ij[i - 1 + (j - 1) * shared.dim.s_ij.mult[1]] = shared.matrix_mean[i - 1 + (j - 1) * shared.dim.matrix_mean.mult[1]] * internal.temp[j - 1];
      }
    }
    for (size_t i = 1; i <= shared.dim.lambda.size; ++i) {
      internal.lambda[i - 1] = shared.b0 * (1 + shared.b1 * monty::math::cos(2 * static_cast<real_type>(3.1415926535897927) * time / 12 + shared.phi)) * dust2::array::sum<real_type>(internal.s_ij.data(), shared.dim.s_ij, {i - 1, i - 1}, {0, shared.dim.s_ij.dim[1] - 1});
    }
    for (size_t i = 1; i <= shared.dim.infect_p.size; ++i) {
      internal.infect_p[i - 1] = internal.lambda[i - 1] * shared.sigma_vect[i - 1] * Sp[i - 1];
    }
    for (size_t i = 1; i <= shared.dim.infect_s.size; ++i) {
      internal.infect_s[i - 1] = internal.lambda[i - 1] * shared.sigma_vect[i - 1] * shared.alpha_vect[i - 1] * Ss[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + 0] = -internal.infect_p[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[1]] = internal.infect_p[i - 1] - shared.delta * Ep[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[2]] = shared.delta * Ep[i - 1] - shared.gamma_p * Ip[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[3]] = -internal.infect_s[i - 1] + shared.nu * R[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[4]] = internal.infect_s[i - 1] - shared.delta * Es[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[5]] = shared.delta * Es[i - 1] - shared.gamma_s * Is[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[6]] = shared.gamma_p * Ip[i - 1] + shared.gamma_s * Is[i - 1] - shared.nu * R[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[7]] = internal.infect_s[i - 1] + internal.infect_p[i - 1];
    }
    for (size_t i = 1; i <= static_cast<size_t>(shared.nAges); ++i) {
      state_deriv[i - 1 + shared.odin.offset.state[8]] = shared.prop_detected_vect[i - 1] * internal.infect_s[i - 1] + shared.prop_detected_vect[i - 1] * internal.infect_p[i - 1];
    }
  }
};

#include <cpp11.hpp>
#include <dust2/r/continuous/system.hpp>

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_alloc(cpp11::list r_pars, cpp11::sexp r_time, cpp11::list r_time_control, cpp11::sexp r_n_particles, cpp11::sexp r_n_groups, cpp11::sexp r_seed, cpp11::sexp r_deterministic, cpp11::sexp r_n_threads) {
  return dust2::r::dust2_continuous_alloc<RSV_ODE>(r_pars, r_time, r_time_control, r_n_particles, r_n_groups, r_seed, r_deterministic, r_n_threads);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_internals(cpp11::sexp ptr, bool include_coefficients, bool include_history) {
  return dust2::r::dust2_system_internals<dust2::dust_continuous<RSV_ODE>>(ptr, include_coefficients, include_history);
}
[[cpp11::register]]
SEXP dust2_system_RSV_ODE_run_to_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_run_to_time<dust2::dust_continuous<RSV_ODE>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_state(cpp11::sexp ptr, cpp11::sexp r_index_state, cpp11::sexp r_index_particle, cpp11::sexp r_index_group, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_state<dust2::dust_continuous<RSV_ODE>>(ptr, r_index_state, r_index_particle, r_index_group, preserve_particle_dimension, preserve_group_dimension);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_time(cpp11::sexp ptr) {
  return dust2::r::dust2_system_time<dust2::dust_continuous<RSV_ODE>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_set_state_initial(cpp11::sexp ptr) {
  return dust2::r::dust2_system_set_state_initial<dust2::dust_continuous<RSV_ODE>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_set_state(cpp11::sexp ptr, cpp11::list r_state) {
  return dust2::r::dust2_system_set_state<dust2::dust_continuous<RSV_ODE>>(ptr, r_state);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_reorder(cpp11::sexp ptr, cpp11::integers r_index) {
  return dust2::r::dust2_system_reorder<dust2::dust_continuous<RSV_ODE>>(ptr, r_index);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_rng_state(cpp11::sexp ptr) {
  return dust2::r::dust2_system_rng_state<dust2::dust_continuous<RSV_ODE>>(ptr);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_set_rng_state(cpp11::sexp ptr, cpp11::sexp r_rng_state) {
  return dust2::r::dust2_system_set_rng_state<dust2::dust_continuous<RSV_ODE>>(ptr, r_rng_state);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_set_time(cpp11::sexp ptr, cpp11::sexp r_time) {
  return dust2::r::dust2_system_set_time<dust2::dust_continuous<RSV_ODE>>(ptr, r_time);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_update_pars(cpp11::sexp ptr, cpp11::list pars) {
  return dust2::r::dust2_system_update_pars<dust2::dust_continuous<RSV_ODE>>(ptr, pars);
}

[[cpp11::register]]
SEXP dust2_system_RSV_ODE_simulate(cpp11::sexp ptr, cpp11::sexp r_times, cpp11::sexp r_index_state, bool preserve_particle_dimension, bool preserve_group_dimension) {
  return dust2::r::dust2_system_simulate<dust2::dust_continuous<RSV_ODE>>(ptr, r_times, r_index_state, preserve_particle_dimension, preserve_group_dimension);
}
